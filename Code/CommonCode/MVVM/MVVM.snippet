<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets  xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <!--View Model Property-->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>MVVM Sidekick View Model Property</Title>
      <Shortcut>propvm</Shortcut>
      <Description>Property of View Model for WPF &amp; Silverlight MVVM </Description>
      <Author>Wayne Wang</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>type</ID>
          <ToolTip>Property Type</ToolTip>
          <Default>int</Default>
        </Literal>
        <Literal>
          <ID>property</ID>
          <ToolTip>Property Name</ToolTip>
          <Default>MyProperty</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[        public $type$ $property$
        {
            get { return m_$property$Locator(this).Value; }
            set { m_$property$Locator(this).SetValueAndTryNotify(value); }
        }        
        
        #region Property $type$ $property$ Setup        
        protected Property<$type$> m_$property$ =
          new Property<$type$>{ LocatorFunc = m_$property$Locator};
        [System.ComponentModel.EditorBrowsable( System.ComponentModel.EditorBrowsableState.Never)]
        static Func<ViewModelBase,ValueContainer<$type$>> m_$property$Locator=
            RegisterContainerLocator<$type$>(
                "$property$",
                model =>
                {
                    model.m_$property$=
                        model.m_$property$ 
                        ?? 
                        new Property<$type$>{LocatorFunc = m_$property$Locator}; 
                    return model.m_$property$.Container = 
                        model.m_$property$.Container
                        ??
                        new ValueContainer<$type$>("$property$",model);
                });          
        #endregion
]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!--View Model Class-->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>MVVM Sidekick View Model Class</Title>
      <Shortcut>vmcls</Shortcut>
      <Description>View Model for WPF &amp; Silverlight MVVM </Description>
      <Author>Wayne Wang</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>class</ID>
          <ToolTip>View Model Class Name</ToolTip>
          <Default>SomeViewModel</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[
        
    public class $class$ : ViewModelBase<$class$> 
    {
        public $class$()
        {
            // Use propery to init value here:
            
        }

        //Use vmprop + tab  to create a new property of vm here:
           

    }
     
        
        
        
]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!--View Model Command With Resource-->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>MVVM Sidekick View Model Command With Resource</Title>
      <Shortcut>vmcmd</Shortcut>
      <Description>Command Model of View Model for WPF &amp; Silverlight MVVM </Description>
      <Author>Wayne Wang</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>commandType</ID>
          <ToolTip>View Model Command Type</ToolTip>
          <Default>ReactiveCommand</Default>
        </Literal>
        <Literal>
          <ID>commandName</ID>
          <ToolTip>View Model Command Type</ToolTip>
          <Default>SomeCommand</Default>
        </Literal>
        <Literal>
          <ID>resourceType</ID>
          <ToolTip>View Model Class Name</ToolTip>
          <Default>String</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp" >
        <![CDATA[

        public ICommandModel<$commandType$, $resourceType$> $commandName$
        {
            get { return m_$commandName$.WithViewModel(this); }
            protected set { m_$commandName$ = value; }
        }       
        
        #region $commandName$ Configuration
        [System.ComponentModel.EditorBrowsable( System.ComponentModel.EditorBrowsableState.Never)]
        CommandModel<$commandType$, $resourceType$> m_$commandName$
            = new $commandType$(canExecute: true).CreateCommandModel(default($resourceType$));
        #endregion
]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!--View Model Command Without Resource--><!--
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>MVVM Sidekick View Model Command Without Resources</Title>
      <Shortcut>vmcmdnr</Shortcut>
      <Description>Command Model of View Model for WPF &amp; Silverlight MVVM </Description>
      <Author>Wayne Wang</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>commandType</ID>
          <ToolTip>View Model Command Type</ToolTip>
          <Default>SomeCommandType</Default>
        </Literal>
        <Literal>
          <ID>commandName</ID>
          <ToolTip>View Model Command Type</ToolTip>
          <Default>SomeCommand</Default>
        </Literal>

      </Declarations>
      <Code Language="csharp" >
        <![CDATA[
        CommandModel<$commandType$> m_$commandName$
            = new $commandType$().CreateCommandModel();
        public CommandModel<$commandType$> $commandName$
        {
            get { return m_$commandName$; }
            protected set { m_$commandName$ = value; }
        }        
]]>
      </Code>
    </Snippet>
  </CodeSnippet>-->






  <!--View Model Property in View-->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>MVVM Sidekick View Model Property in View</Title>
      <Shortcut>propvw</Shortcut>
      <Description>Command Model of View Model for WPF &amp; Silverlight MVVM </Description>
      <Author>Wayne Wang</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>propType</ID>
          <ToolTip>View Model Property Type</ToolTip>
          <Default>string</Default>
        </Literal>
        <Literal>
          <ID>ownerType</ID>
          <ToolTip>View Type</ToolTip>
          <Default>ownerType</Default>
        </Literal>

      </Declarations>
      <Code Language="csharp" >
        <![CDATA[
        public $propType$ ViewModel
        {
            get { return ($propType$)GetValue(ViewModelProperty); }
            set { SetValue(ViewModelProperty, value); }
        }

        // Using a DependencyProperty as the backing store for ViewModel.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty ViewModelProperty =
            DependencyProperty.Register("ViewModel", typeof($propType$), typeof($ownerType$), new PropertyMetadata(default($propType$)));

]]>
      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>
